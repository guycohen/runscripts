#!/usr/bin/python
from os import environ, getcwd
import numpy as np
from random import randint

# Read in the general parameters:
exec(compile(open('general.param').read(), 'general.param', 'exec'))

params = []

# Parameter set 1:
params.append({
    # General parameters:
    'comment': ['first_set_of_test_runs'],
    'A': [1.0],
    'epsilon': [0.1, 0.2],
    'mu': myarange(0, 4, 0.5),

    # Other parameters:
    'excludedparam': [-999],
    'a': [50.0],
    'b': [0.0],
})

prefix = "myprefix"
numConcurrentProcesses = 1  # Local parallel execution of serial code.
numThreadsPerNode = 4 # MPI ranks per compute node.
numNodesPerJob = 1 # MPI number of compute nodes.
memory = "500MB"
queueName = '<INSERT_NAME_OF_QUEUE_HERE>'
executable_name = 'python ' + execDir + '/example_mpi_application.py'
secondary_keys = ['mu']  # These are grouped together in subdirectories.
excluded_keys = ['excludedparam']  # These are excluded from directory names.

def walltime_func(pdict):
    return calc_walltime(1 * 3600)
def seed_func(pdict):
    return randint(0,1000000)

# Read in the execution parameters:
exec(compile(open('execution.param').read(), 'execution.param', 'exec'))

# The following allows the creation of derived parameters by post-processing
# functions. This is not needed in the example, where the parameter file is
# itself a python script, but can be useful in general.
# To use, add items of the form ['new_key', func_of_pdict].
post_data = [
    ['postderived', lambda pdict: -0.5 * pdict['epsilon']], ['seed', seed_func]
]
